{"version":3,"sources":["components/Buttons.tsx","components/Themes.tsx","components/Landing.tsx","components/Inputs.tsx","services/DartscoreService.ts","components/Create.tsx","components/Join.tsx","components/Lobby.tsx","components/Modals.tsx","hooks/updateDartState.ts","hooks/useDartsGameState.ts","components/Cricket.tsx","components/FiveOne.tsx","components/Game.tsx","App.tsx","reportWebVitals.ts","fonts/PressStart2P-Regular.ttf","index.tsx"],"names":["CreateButton","styled","Button","JoinButton","HomeTheme","section","GameTheme","Landing","history","useHistory","routeChange","path","push","onClick","JoinInput","TextField","ScoreInput","input","axios","defaults","headers","get","baseurl","UpdateGame","gameID","gameState","url","post","game_id","game_state","then","res","data","catch","err","Promise","reject","JSON","stringify","GetGameState","ModeToggleGroup","ToggleButtonGroup","Create","useState","player","setPlayer","gameId","setGameId","gameType","setGameType","useEffect","GenerateGameId","console","log","CreateAndRoute","game_type","CreateGame","pathname","state","placeholder","inputProps","maxLength","style","textTransform","textAlign","onChange","event","target","value","toUpperCase","newGameType","exclusive","ToggleButton","Join","Lobby","useLocation","readableGameType","setReadableGameType","player1","setPlayer1","player2","setPlayer2","ready","setReady","playButton","ws","useRef","connURL","connectMessage","msg","current","WebSocket","onopen","send","onmessage","LobbyState","players","length","onclose","wsMessage","includes","startMessage","startGame","InitializeGame","PlayButton","WinModal","Modal","checkWinStateCricket","p1Checked","Object","entries","key","p2Checked","segment","checkWinStateFive","DartGameStateActionTypes","handleUpdateGameState","dispatch","type","updateGameState","CricketTable","table","CricketHeader","th","CricketFooter","CricketRow","tr","CricketNumber","td","Cricket","setButton","otherPlayer","initialState","Total","Bull","useReducer","action","updateTargetValueByPlayerId","currentPlayer","playerId","modifiedPlayer","useDartGameState","winner","setWinner","buttonUpdate","newGameState","parse","score","parseInt","updateCricketState","updateMessage","newGame","iconSelection","EndGame","body","id","map","renderCricketRow","open","aria-labelledby","aria-describedby","FiveOneGame","FiveOneSection","span","FiveOneScore","label","FiveOneTable","Table","FiveOneHeader","FiveOneRow","TableRow","FiveOneContainer","TableContainer","FiveOneData","TableCell","FiveOne","textScore","setTextScore","isNaN","Number","Moves","useFiveOneState","newTotal","updateFiveOneState","document","getElementById","renderFiveOneRow","rows","moves","i","reverse","renderInput","onKeyDown","handleScoreInput","stickyHeader","TableBody","Game","App","StylesProvider","injectFirst","basename","process","component","exact","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.85757f87.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst CreateButton = styled(Button)`\n    background-color: #b989f8; // #6772e5;\n    color: black;\n    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n    padding: 7px 14px;\n    margin: 10px;\n    &:hover {\n        background-color: #9d74d3;\n    }\n`;\n\nconst JoinButton = styled(Button)`\n    background-color: #2adcc4; //#5dce41;\n    color: black;\n    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);\n    padding: 7px 14px;\n    margin: 10px;\n    &:hover {\n        background-color: #24b39f;\n    }\n`;\n\nexport { CreateButton, JoinButton };\n","import styled from 'styled-components';\n\nexport const HomeTheme = styled.section`\n    text-align: center;\n    background-color: #252525;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n`;\n\nexport const GameTheme = styled.section`\n    text-align: center;\n    background-color: #252525;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    font-size: calc(10px + 2vmin);\n    //font-family: 'PressStart2P';\n    font-family: source-code-pro;\n    color: white;\n`;\n\nexport const JoinTheme = styled.section`\n    text-align: center;\n    background-color: #252525;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n`;\n","import React from 'react';\nimport { CreateButton, JoinButton } from 'components/Buttons';\nimport { HomeTheme } from 'components/Themes';\nimport { useHistory } from 'react-router-dom';\n\nconst Landing = () => {\n    const history = useHistory();\n\n    const routeChange = (path: string) => {\n        history.push(path);\n    };\n\n    return (\n        <HomeTheme>\n            <div>\n                <h1>Dartscore</h1>\n            </div>\n            <div>\n                <CreateButton onClick={() => routeChange('/create')}>\n                    Create Game\n                </CreateButton>\n            </div>\n\n            <div>\n                <JoinButton onClick={() => routeChange('/join')}>\n                    Join Game\n                </JoinButton>\n            </div>\n        </HomeTheme>\n    );\n};\n\nexport default Landing;\n","import styled from 'styled-components';\nimport TextField from '@material-ui/core/TextField';\n\nexport const JoinInput = styled(TextField)`\n    /* default */\n    .MuiInput-underline:before {\n        border-bottom: 2px solid #2adcc4;\n    }\n    /* hover (double-ampersand needed for specificity reasons. */\n    && .MuiInput-underline:hover:before {\n        border-bottom: 2px solid #2adcc4;\n        color: #9d74d3;\n    }\n    /* focused */\n    .MuiInput-underline:after {\n        border-bottom: 2px solid #9d74d3;\n        color: #9d74d3;\n    }\n    & .Mui-focused:after {\n        color: #9d74d3;\n    }\n    & .MuiInput-root {\n        padding: 10px;\n        margin: 10px;\n        color: #2adcc4;\n    }\n    & ::placeholder {\n        color: #9d74d3; //color: #2adcc4;\n    }\n`;\n\nexport const ScoreInput = styled.input`\n    font-size: 18px;\n    padding: 10px;\n    margin: 10px;\n    background: #b6b6b6;\n    border: none;\n    border-radius: 3px;\n    ::placeholder {\n        color: #666666;\n    }\n    text-transform: uppercase;\n`;\n","import axios, { AxiosResponse, AxiosError } from 'axios';\nimport { GameState, FiveOneState } from 'hooks/useDartsGameState';\n\naxios.defaults.headers.get['Content-Type'] = 'application/json';\n\nconst baseurl = 'https://iukxdiz252.execute-api.us-east-1.amazonaws.com/dev';\n\nexport const GenerateGameId = () => {\n    let url = `${baseurl}/generateid`;\n\n    return axios\n        .get(url)\n        .then((res: AxiosResponse) => {\n            return res.data;\n        })\n        .catch((err: AxiosError) => {\n            return Promise.reject(JSON.stringify(err));\n        });\n};\n\nexport const InitializeGame = (\n    gameID: string,\n    players: string[],\n    game_type: string,\n) => {\n    let url = `${baseurl}/initialize`;\n\n    return axios\n        .post(url, { game_id: gameID, players: players, game_type: game_type })\n        .then((res: AxiosResponse) => {\n            return res.data;\n        })\n        .catch((err: AxiosError) => {\n            return Promise.reject(JSON.stringify(err));\n        });\n};\n\nexport const CreateGame = (game_id: string, game_type: string) => {\n    let url = `${baseurl}/create`;\n\n    return axios\n        .post(url, { game_id: game_id, game_type: game_type })\n        .then((res: AxiosResponse) => {\n            return res.data;\n        })\n        .catch((err: AxiosError) => {\n            return Promise.reject(JSON.stringify(err));\n        });\n};\n\nexport const UpdateGame = (\n    gameID: string,\n    gameState: GameState | FiveOneState,\n) => {\n    let url = `${baseurl}/update`;\n\n    return axios\n        .post(url, { game_id: gameID, game_state: gameState })\n        .then((res: AxiosResponse) => {\n            return res.data;\n        })\n        .catch((err: AxiosError) => {\n            return Promise.reject(JSON.stringify(err));\n        });\n};\n\nexport const LobbyState = (gameID: string) => {\n    let url = `${baseurl}/lobby?game=${gameID}`;\n\n    return axios\n        .get(url)\n        .then((res: AxiosResponse) => {\n            return res.data;\n        })\n        .catch((err: AxiosError) => {\n            return Promise.reject(JSON.stringify(err));\n        });\n};\n\nexport const GetGameState = (gameID: string) => {\n    let url = `${baseurl}/gamestate?game=${gameID}`;\n\n    return axios\n        .get(url)\n        .then((res: AxiosResponse) => {\n            return res.data;\n        })\n        .catch((err: AxiosError) => {\n            return Promise.reject(JSON.stringify(err));\n        });\n};\n","import React, { useState, useEffect } from 'react';\nimport { HomeTheme } from 'components/Themes';\nimport { JoinInput } from 'components/Inputs';\nimport { JoinButton } from 'components/Buttons';\nimport { useHistory } from 'react-router-dom';\nimport { GenerateGameId, CreateGame } from 'services/DartscoreService';\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\nimport styled from 'styled-components';\n\nconst ModeToggleGroup = styled(ToggleButtonGroup)`\n    background-color: #2adcc4;\n    color: black;\n    &:hover {\n        background-color: #9d74d3;\n        color: black;\n    }\n`;\n\nconst Create = () => {\n    const history = useHistory();\n    const [player, setPlayer] = useState('');\n    const [gameId, setGameId] = useState('');\n    const [gameType, setGameType] = useState('cricket');\n\n    useEffect(() => {\n        if (!gameId) {\n            GenerateGameId().then((res) => {\n                const { game_id } = res;\n                if (!gameId) {\n                    setGameId(game_id);\n                    console.log(game_id);\n                }\n            });\n        }\n    }, [gameId]);\n\n    const CreateAndRoute = (path: string) => {\n        CreateGame(gameId, gameType).then(() => {\n            history.push({\n                pathname: path,\n                state: {\n                    gameID: gameId,\n                    player: player,\n                },\n            });\n        });\n    };\n\n    const handleChange = (event: object, newGameType: string) => {\n        if (newGameType !== null) {\n            setGameType(newGameType);\n        }\n    };\n\n    return (\n        <HomeTheme>\n            <div>\n                <h1>Dartscore</h1>\n            </div>\n            <div>\n                <h2>Game Code: {gameId}</h2>\n            </div>\n            <div>\n                <label>Name</label>\n            </div>\n            <div>\n                <JoinInput\n                    placeholder=\"Enter Your Name\"\n                    inputProps={{\n                        maxLength: 12,\n                        style: {\n                            textTransform: 'uppercase',\n                            textAlign: 'center',\n                        },\n                    }}\n                    onChange={(event) =>\n                        setPlayer(event.target.value.toUpperCase())\n                    }\n                />\n            </div>\n            <div>\n                <ModeToggleGroup\n                    value={gameType}\n                    onChange={handleChange}\n                    exclusive\n                >\n                    <ToggleButton value=\"cricket\">Cricket</ToggleButton>\n                    <ToggleButton value=\"fiveOhOne\">501</ToggleButton>\n                </ModeToggleGroup>\n            </div>\n            <div>\n                <JoinButton onClick={() => CreateAndRoute('/lobby')}>\n                    Play\n                </JoinButton>\n            </div>\n        </HomeTheme>\n    );\n};\n\nexport default Create;\n","import React, { useState } from 'react';\nimport { HomeTheme } from 'components/Themes';\nimport { JoinInput } from 'components/Inputs';\nimport { JoinButton } from 'components/Buttons';\nimport { useHistory } from 'react-router-dom';\n\nconst Join = () => {\n    const [gameId, setGameId] = useState('');\n    const [player, setPlayer] = useState('');\n    // will need to see if game is in progress or not to go to path\n    const history = useHistory();\n\n    const routeChange = (path: string) => {\n        history.push({\n            pathname: path,\n            state: {\n                gameID: gameId,\n                player: player,\n            },\n        });\n    };\n\n    return (\n        <HomeTheme>\n            <div>\n                <h1>Dartscore</h1>\n            </div>\n            <div>\n                <label>Game Code</label>\n            </div>\n            <div>\n                <JoinInput\n                    placeholder=\"Enter 4-Letter Code\"\n                    inputProps={{\n                        maxLength: 4,\n                        style: {\n                            textTransform: 'uppercase',\n                            textAlign: 'center',\n                        },\n                    }}\n                    onChange={(event) =>\n                        setGameId(event.target.value.toUpperCase())\n                    }\n                />\n            </div>\n            <div>\n                <label>Name</label>\n            </div>\n            <div>\n                <JoinInput\n                    placeholder=\"Enter Your Name\"\n                    inputProps={{\n                        maxLength: 12,\n                        style: {\n                            textTransform: 'uppercase',\n                            textAlign: 'center',\n                        },\n                    }}\n                    onChange={(event) =>\n                        setPlayer(event.target.value.toUpperCase())\n                    }\n                />\n            </div>\n            <div>\n                <JoinButton onClick={() => routeChange('/lobby')}>\n                    Play\n                </JoinButton>\n            </div>\n        </HomeTheme>\n    );\n};\n\nexport default Join;\n","import React, { useRef, useEffect, useState } from 'react';\nimport { JoinButton } from 'components/Buttons';\nimport { HomeTheme } from 'components/Themes';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { LobbyState, InitializeGame } from 'services/DartscoreService';\n\ntype LobbyProps = {\n    gameID: string;\n    player: string;\n};\n\nconst Lobby = () => {\n    const { state } = useLocation<LobbyProps>();\n    const { gameID, player } = state;\n    const [gameType, setGameType] = useState('');\n    const [readableGameType, setReadableGameType] = useState('');\n    const [player1, setPlayer1] = useState('');\n    const [player2, setPlayer2] = useState('');\n    const [ready, setReady] = useState(false);\n    const host = player === player1;\n    const playButton = ready && host;\n\n    const history = useHistory();\n\n    useEffect(() => {\n        if (gameType) {\n            gameType === 'cricket'\n                ? setReadableGameType('Cricket')\n                : setReadableGameType('501');\n        }\n    }, [gameType]);\n    const ws = useRef<WebSocket>();\n    const connURL = `wss://cvc7ipmik7.execute-api.us-east-1.amazonaws.com/dev/?game=${gameID}&player=${player}`;\n\n    const connectMessage = {\n        game_id: gameID,\n        msg: 'I have connected',\n    };\n\n    useEffect(() => {\n        if (!ws.current) {\n            ws.current = new WebSocket(connURL);\n            ws.current.onopen = () => {\n                console.log('ws opened');\n                ws.current?.send(JSON.stringify(connectMessage));\n            };\n            ws.current.onmessage = () => {\n                if (!ready) {\n                    LobbyState(gameID).then((res) => {\n                        const { players, game_type } = res;\n                        setGameType(game_type);\n                        if (!player1) {\n                            setPlayer1(players[0]['player']);\n                            console.log(player1);\n                        }\n                        if (players.length === 2 && !player2) {\n                            setPlayer2(players[1]['player']);\n                        }\n                    });\n                }\n            };\n            ws.current.onclose = () => console.log('ws closed');\n\n            // return () => {\n            //     ws.current?.close();\n            // };\n            // How will i close socket connections? and update them as well\n        }\n    });\n\n    useEffect(() => {\n        if (player1 && player2) {\n            setReady(true);\n        }\n    }, [player1, player2]);\n\n    useEffect(() => {\n        if (ready) {\n            ws.current.onmessage = (wsMessage) => {\n                console.log(wsMessage);\n                if (wsMessage.data.includes('start')) routeChange('/game');\n            };\n        }\n    });\n\n    const routeChange = (path: string) => {\n        history.push({\n            pathname: path,\n            state: {\n                gameID: gameID,\n                gameType: gameType,\n                player: player,\n                player1: player1,\n                player2: player2,\n                connURL: connURL,\n            },\n        });\n    };\n\n    const startMessage = {\n        game_id: gameID,\n        msg: 'start',\n    };\n    const players = [player1, player2];\n\n    const startGame = () => {\n        InitializeGame(gameID, players, gameType).then(() => {\n            ws.current?.send(JSON.stringify(startMessage));\n        });\n    };\n    const PlayButton = () => (\n        <div>\n            <JoinButton\n                onClick={() => {\n                    startGame();\n                }}\n            >\n                Play\n            </JoinButton>\n        </div>\n    );\n\n    return (\n        <HomeTheme>\n            <div>\n                <h1>Dartscore Lobby: {gameID}</h1>\n                <h1>{readableGameType}</h1>\n            </div>\n            <div>\n                <h3>{player1}</h3>\n                <h3>{player2}</h3>\n            </div>\n            {playButton ? <PlayButton /> : null}\n        </HomeTheme>\n    );\n};\n\nexport default Lobby;\n","import styled from 'styled-components';\nimport Modal from '@material-ui/core/Modal';\n\nexport const WinModal = styled(Modal)`\n    position: 'absolute';\n    width: 400;\n    backgroundcolor: white;\n    border: '2px solid #000';\n`;\n","export interface GameState {\n    [key: string]: Target;\n}\n\nexport interface Target {\n    [key: string]: number;\n}\n\nexport interface FiveOneState {\n    [key: string]: MoveTotal;\n}\nexport interface MoveTotal {\n    [key: string]: number | number[];\n}\nexport function updateCricketState(\n    segment: string,\n    playerId: string,\n    otherPlayer: string,\n    gameState: GameState,\n) {\n    const newGameState = JSON.parse(JSON.stringify(gameState));\n    newGameState[playerId][segment]++;\n    if (\n        newGameState[playerId][segment] > 3 &&\n        newGameState[otherPlayer][segment] < 3\n    ) {\n        const score = segment === 'Bull' ? 25 : parseInt(segment);\n        newGameState[playerId]['Total'] += score;\n    }\n    return newGameState;\n}\n\nexport function updateFiveOneState(\n    score: number,\n    playerId: string,\n    //otherPlayer: string,\n    gameState: FiveOneState,\n) {\n    const newGameState = JSON.parse(JSON.stringify(gameState));\n    const invalidScores = [163, 166, 169, 172, 173, 175, 176, 178, 179];\n    const invalidCheckout = [159, 162, 163, 165, 166, 168, 169];\n    if (invalidScores.includes(score) || score > 180 || score < 0) {\n        return newGameState;\n    }\n    var newTotal = newGameState[playerId]['Total'] - score;\n    if (newTotal === 0 && invalidCheckout.includes(score)) {\n        // this means its an invalid checkout\n        return newGameState;\n    }\n    if (newTotal < 0) {\n        // add functionality to handle busts and alert the user\n        return newGameState;\n    }\n    newGameState[playerId]['Total'] = newTotal;\n    newGameState[playerId]['Moves'].push(score);\n\n    return newGameState;\n}\n\nexport function checkWinStateCricket(\n    gameState: GameState,\n    player1: string,\n    player2: string,\n) {\n    console.log('In check winstate');\n    var p1Checked = true;\n    for (const [key, value] of Object.entries(gameState[player1])) {\n        console.log(key);\n        console.log(value);\n        if (key !== 'Total' && gameState[player1][key] < 3) {\n            p1Checked = false;\n            console.log('set p1 false');\n            break;\n        }\n    }\n    var p2Checked = true;\n    for (const [segment, value] of Object.entries(gameState[player2])) {\n        if (segment !== 'Total' && value < 3) {\n            console.log(segment);\n            console.log(value);\n            p2Checked = false;\n            console.log('set p2 false');\n            break;\n        }\n    }\n    console.log(gameState[player1]['Total'] > gameState[player2]['Total']);\n    if (\n        p1Checked &&\n        gameState[player1]['Total'] > gameState[player2]['Total']\n    ) {\n        console.log('returning player 1');\n        return player1;\n    }\n    if (\n        p2Checked &&\n        gameState[player2]['Total'] > gameState[player1]['Total']\n    ) {\n        return player2;\n    }\n    return '';\n}\n\nexport function checkWinStateFive(\n    gameState: FiveOneState,\n    player1: string,\n    player2: string,\n) {\n    console.log('In check winstate');\n    if (gameState[player1]['Total'] === 0) {\n        return player1;\n    }\n\n    if (gameState[player2]['Total'] === 0) {\n        return player2;\n    }\n\n    return '';\n}\n","import { useReducer, Reducer, Dispatch } from 'react';\n\nexport interface GameState {\n    [key: string]: Target;\n}\nexport interface FiveOneState {\n    [key: string]: MoveTotal;\n}\n\nexport interface Target {\n    [key: string]: number;\n}\nexport interface MoveTotal {\n    [key: string]: number | number[];\n}\nexport enum DartGameStateActionTypes {\n    'updateTargetValueByPlayerId' = 'updateTargetValueByPlayerId',\n    'updateGameState' = 'updateGameState',\n}\n\nexport type DartGameStateActions =\n    | {\n          type: DartGameStateActionTypes.updateTargetValueByPlayerId;\n          playerId: string;\n          segment: string;\n      }\n    | { type: DartGameStateActionTypes.updateGameState; gameState: GameState };\n\nexport function useDartGameState(\n    initialState: GameState,\n): [GameState, Dispatch<DartGameStateActions>] {\n    const gameStateReducer = (\n        state: GameState,\n        action: DartGameStateActions,\n    ) => {\n        switch (action.type) {\n            case DartGameStateActionTypes.updateTargetValueByPlayerId:\n                const currentPlayer = state[action.playerId];\n                const modifiedPlayer = {\n                    ...state[action.playerId],\n                    [action.segment]: currentPlayer[action.segment]++,\n                };\n                return { ...state, [action.playerId]: modifiedPlayer };\n            case DartGameStateActionTypes.updateGameState:\n                return action.gameState;\n            default:\n                return state;\n        }\n    };\n    return useReducer<Reducer<GameState, DartGameStateActions>>(\n        gameStateReducer,\n        initialState,\n    );\n}\n\nexport function useFiveOneState(\n    initialState: FiveOneState,\n): [FiveOneState, Dispatch<DartGameStateActions>] {\n    const fiveOneStateReducer = (\n        state: FiveOneState,\n        action: DartGameStateActions,\n    ) => {\n        switch (action.type) {\n            case DartGameStateActionTypes.updateGameState:\n                return action.gameState;\n            default:\n                return state;\n        }\n    };\n    return useReducer<Reducer<FiveOneState, DartGameStateActions>>(\n        fiveOneStateReducer,\n        initialState,\n    );\n}\n\nexport function handleUpdateTargetValueByPlayerId({\n    dispatch,\n    playerId,\n    segment,\n}: {\n    dispatch: Dispatch<DartGameStateActions>;\n    playerId: string;\n    segment: string;\n}) {\n    return () => {\n        dispatch({\n            type: DartGameStateActionTypes.updateTargetValueByPlayerId,\n            playerId,\n            segment,\n        });\n    };\n}\n\nexport function handleUpdateGameState(\n    dispatch: Dispatch<DartGameStateActions>,\n) {\n    return (gameState: GameState) => {\n        dispatch({\n            type: DartGameStateActionTypes.updateGameState,\n            gameState,\n        });\n    };\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { UpdateGame, GetGameState } from 'services/DartscoreService';\nimport { WinModal } from 'components/Modals';\nimport {\n    updateCricketState,\n    checkWinStateCricket,\n} from 'hooks/updateDartState';\nimport {\n    handleUpdateGameState,\n    useDartGameState,\n} from 'hooks/useDartsGameState';\nimport { JoinButton, CreateButton } from 'components/Buttons';\nimport { GameTheme } from 'components/Themes';\nimport { useHistory } from 'react-router-dom';\n\nconst CricketTable = styled.table`\n    border-collapse: collapse;\n    width: 100%;\n`;\n\nconst CricketHeader = styled.th`\n    padding: 10px;\n    border-bottom: 3px solid white;\n`;\n\nconst CricketFooter = styled.th`\n    padding: 10px;\n    border-top: 3px solid white;\n`;\n\nconst CricketRow = styled.tr`\n    height: 70px;\n`;\n\nconst CricketNumber = styled.td`\n    padding: 10px;\n    border-left: 3px solid white;\n    border-right: 3px solid white;\n`;\n\ntype CricketProps = {\n    gameID: string;\n    player: string;\n    player1: string;\n    player2: string;\n    connURL: string;\n};\nconst Cricket = ({\n    gameID,\n    player,\n    player1,\n    player2,\n    connURL,\n}: CricketProps) => {\n    const cricketRows = ['20', '19', '18', '17', '16', '15', 'Bull'];\n    const [button, setButton] = useState(false);\n    const otherPlayer = player === player1 ? player2 : player1;\n    const initialState = {\n        [player1]: {\n            '15': 0,\n            '16': 0,\n            '17': 0,\n            '18': 0,\n            '19': 0,\n            '20': 0,\n            Total: 0,\n            Bull: 0,\n        },\n        [player2]: {\n            '15': 0,\n            '16': 0,\n            '17': 0,\n            '18': 0,\n            '19': 0,\n            '20': 0,\n            Total: 0,\n            Bull: 0,\n        },\n    };\n    const [gameState, dispatch] = useDartGameState(initialState);\n    const [winner, setWinner] = useState('');\n    const ws = useRef<WebSocket>();\n\n    useEffect(() => {\n        if (!ws.current) {\n            ws.current = new WebSocket(connURL);\n            ws.current.onopen = () => {\n                console.log('ws opened');\n                GetGameState(gameID).then((res) => {\n                    const { game_state } = res;\n                    setButton(false);\n                    handleUpdateGameState(dispatch)(game_state);\n                    setWinner(\n                        checkWinStateCricket(game_state, player1, player2),\n                    );\n                });\n            };\n            ws.current.onmessage = (msg) => {\n                console.log(msg.data);\n                console.log(!msg.data.includes(player));\n                GetGameState(gameID).then((res) => {\n                    const { game_state } = res;\n                    setButton(false);\n                    handleUpdateGameState(dispatch)(game_state);\n                    setWinner(\n                        checkWinStateCricket(game_state, player1, player2),\n                    );\n                });\n            };\n            ws.current.onclose = () => console.log('ws closed');\n\n            // return () => {\n            //     ws.current?.close();\n            // };\n            // How will i close socket connections?\n\n            // if i send an update i dont update myself but my partner updates,\n            //then my partner sends an update because he updated and i update infinite loop\n        }\n    });\n\n    const history = useHistory();\n\n    const routeChange = (path: string) => {\n        history.push(path);\n    };\n\n    const buttonUpdate = (segment: string) => {\n        const newGameState = updateCricketState(\n            segment,\n            player,\n            otherPlayer,\n            gameState,\n        );\n        const updateMessage = {\n            game_id: gameID,\n            msg: player,\n        };\n        console.log('new game state');\n        console.log(newGameState);\n        UpdateGame(gameID, newGameState).then(() => {\n            ws.current.send(JSON.stringify(updateMessage));\n        });\n    };\n\n    const newGame = () => {\n        const updateMessage = {\n            game_id: gameID,\n            msg: player,\n        };\n        UpdateGame(gameID, initialState).then(() => {\n            ws.current.send(JSON.stringify(updateMessage));\n        });\n    };\n\n    const iconSelection = (score: number) => {\n        if (score === 0) {\n            return '';\n        }\n        if (score === 1) {\n            return `/`;\n        }\n        if (score === 2) {\n            return `x`;\n        }\n        if (score >= 3) {\n            return ` \\u24E7 `;\n        }\n    };\n    const renderCricketRow = (segment: string) => {\n        return (\n            <CricketRow>\n                <td>{iconSelection(gameState[player1][segment])}</td>\n                <CricketNumber>\n                    <button\n                        onClick={() => {\n                            buttonUpdate(segment);\n                            setButton(true);\n                        }}\n                    >\n                        {segment}\n                    </button>\n                </CricketNumber>\n                <td>{iconSelection(gameState[player2][segment])}</td>\n            </CricketRow>\n        );\n    };\n\n    const EndGame = () => (\n        // gota make sure i notify the other to go back to the home screen\n        <div>\n            <JoinButton onClick={newGame}>New Game</JoinButton>\n            <CreateButton onClick={() => routeChange('/')}>Exit</CreateButton>\n        </div>\n    );\n\n    const body = (\n        <GameTheme>\n            <h2 id=\"simple-modal-title\">{winner} Wins!</h2>\n            {/* <p id=\"simple-modal-description\">\n                Start a new game or exit buttons\n            </p> */}\n            {player === player1 ? <EndGame /> : null}\n        </GameTheme>\n    );\n\n    console.log('WINNER');\n    console.log(winner);\n    return (\n        <div>\n            <CricketTable>\n                <tbody>\n                    <CricketRow>\n                        <CricketHeader>{player1}</CricketHeader>\n                        <CricketHeader>VS</CricketHeader>\n                        <CricketHeader>{player2}</CricketHeader>\n                    </CricketRow>\n                    {cricketRows.map((segment) => renderCricketRow(segment))}\n                    <CricketRow>\n                        <CricketFooter>\n                            {gameState[player1]['Total']}\n                        </CricketFooter>\n                        <CricketFooter></CricketFooter>\n                        <CricketFooter>\n                            {gameState[player2]['Total']}\n                        </CricketFooter>\n                    </CricketRow>\n                </tbody>\n            </CricketTable>\n            <WinModal\n                open={winner !== ''}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n            >\n                {body}\n            </WinModal>\n        </div>\n    );\n};\n\nexport default Cricket;\n","import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport { WinModal } from 'components/Modals';\nimport { ScoreInput } from 'components/Inputs';\nimport { UpdateGame, GetGameState } from 'services/DartscoreService';\nimport { updateFiveOneState, checkWinStateFive } from 'hooks/updateDartState';\nimport {\n    FiveOneState,\n    handleUpdateGameState,\n    useFiveOneState,\n} from 'hooks/useDartsGameState';\nimport { JoinButton, CreateButton } from 'components/Buttons';\nimport { GameTheme } from 'components/Themes';\nimport { useHistory } from 'react-router-dom';\n\nconst FiveOneGame = styled.section`\n    //add legs\n    text-align: center;\n    background-color: #252525;\n    justify-content: center;\n    display: flex;\n    flex-direction: row;\n    min-height: 50vh;\n    align-items: center;\n    font-size: calc(10px + 2vmin);\n    //font-family: 'PressStart2P';\n    font-family: source-code-pro;\n    color: white;\n`;\n\nconst PlayerDot = styled.span`\n    height: 25px;\n    width: 25px;\n    background-color: green;\n    border-radius: 50%;\n    display: inline-block;\n`;\n\nconst FiveOneSection = styled.section`\n    display: flex;\n    flex-direction: column;\n    padding: 10px;\n`;\nconst FiveOneScore = styled.label`\n    padding: 40px;\n    font-size: calc(150px + 2vmin);\n`;\n\nconst FiveOneTable = styled(Table)`\n    border-collapse: collapse;\n    width: 100%;\n`;\n\nconst FiveOneHeader = styled.label`\n    padding: 10px;\n    border-bottom: 3px solid white;\n`;\n\nconst FiveOneRow = styled(TableRow)`\n    // pull cricket row out into a separate component\n    height: 20px;\n`;\nconst FiveOneContainer = styled(TableContainer)`\n    // pull cricket row out into a separate component\n    height: 300px;\n`;\n\nconst FiveOneData = styled(TableCell)`\n    color: white;\n    text-align: left;\n`;\n\ntype FiveOneProps = {\n    gameID: string;\n    player: string;\n    player1: string;\n    player2: string;\n    connURL: string;\n};\n\nconst FiveOne = ({\n    gameID,\n    player,\n    player1,\n    player2,\n    connURL,\n}: FiveOneProps) => {\n    const [textScore, setTextScore] = useState('');\n    const score = !isNaN(Number(textScore)) ? Number(textScore) : 0; // warn user invalid input\n\n    const [button, setButton] = useState(false);\n    const otherPlayer = player === player1 ? player2 : player1;\n    const [winner, setWinner] = useState('');\n    const initialState: FiveOneState = {\n        [player1]: {\n            Total: 501,\n            Moves: [],\n        },\n        [player2]: {\n            Total: 501,\n            Moves: [],\n        },\n    };\n    const [gameState, dispatch] = useFiveOneState({\n        [player1]: {\n            Total: 501,\n            Moves: [],\n        },\n        [player2]: {\n            Total: 501,\n            Moves: [],\n        },\n    });\n    const ws = useRef<WebSocket>();\n\n    useEffect(() => {\n        if (!ws.current) {\n            ws.current = new WebSocket(connURL);\n            ws.current.onopen = () => {\n                console.log('ws opened');\n                GetGameState(gameID).then((res) => {\n                    const { game_state } = res;\n                    setButton(false);\n                    handleUpdateGameState(dispatch)(game_state);\n                    setWinner(checkWinStateFive(game_state, player1, player2));\n                });\n            };\n            ws.current.onmessage = (msg) => {\n                console.log(msg.data);\n                console.log(!msg.data.includes(player));\n                GetGameState(gameID).then((res) => {\n                    const { game_state } = res;\n                    setButton(false);\n                    handleUpdateGameState(dispatch)(game_state);\n                    setWinner(checkWinStateFive(game_state, player1, player2));\n                });\n            };\n            ws.current.onclose = () => console.log('ws closed');\n\n            // return () => {\n            //     ws.current?.close();\n            // };\n            // How will i close socket connections?\n\n            // if i send an update i dont update myself but my partner updates,\n            //then my partner sends an update because he updated and i update infinite loop\n        }\n    });\n\n    const history = useHistory();\n\n    const routeChange = (path: string) => {\n        history.push(path);\n    };\n\n    const buttonUpdate = () => {\n        if (!score) {\n            (document.getElementById('score') as HTMLInputElement).value = '';\n            return;\n        }\n        const newGameState = updateFiveOneState(score, player, gameState);\n        const updateMessage = {\n            game_id: gameID,\n            msg: player,\n        };\n        console.log('new game state');\n        console.log(newGameState);\n        (document.getElementById('score') as HTMLInputElement).value = '';\n        UpdateGame(gameID, newGameState).then(() => {\n            ws.current.send(JSON.stringify(updateMessage));\n        });\n    };\n    const newGame = () => {\n        const updateMessage = {\n            game_id: gameID,\n            msg: player,\n        };\n        UpdateGame(gameID, initialState).then(() => {\n            ws.current.send(JSON.stringify(updateMessage));\n        });\n    };\n\n    const EndGame = () => (\n        <div>\n            <JoinButton onClick={newGame}>New Game</JoinButton>\n            <CreateButton onClick={() => routeChange('/')}>Exit</CreateButton>\n        </div>\n    );\n\n    const body = (\n        <GameTheme>\n            <h2 id=\"simple-modal-title\">{winner} Wins!</h2>\n            {/* <p id=\"simple-modal-description\">\n                Start a new game or exit buttons\n            </p> */}\n            {player === player1 ? <EndGame /> : null}\n        </GameTheme>\n    );\n\n    const renderFiveOneRow = (playerId: string) => {\n        var rows = [];\n        let moves = gameState[playerId]['Moves'] as number[];\n        for (var i = 0; i < moves.length; i++) {\n            rows.push(\n                <FiveOneRow>\n                    <FiveOneData>{(i + 1) * 3}</FiveOneData>\n                    <FiveOneData>{moves[i]}</FiveOneData>\n                </FiveOneRow>,\n            );\n        }\n        return rows.reverse();\n    };\n    const handleScoreInput = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === 'Enter') {\n            if (score) {\n                buttonUpdate();\n            }\n        }\n    };\n    const renderInput = (playerId: string) => {\n        // can add functionality to only allow scroe if its players turn\n        if (playerId === player) {\n            return (\n                <div>\n                    <ScoreInput\n                        placeholder=\"Score\"\n                        id=\"score\"\n                        onChange={(event) =>\n                            setTextScore(event.target.value.toUpperCase())\n                        }\n                        onKeyDown={(event) => handleScoreInput(event)}\n                    />\n                    <button onClick={buttonUpdate}>submit</button>\n                </div>\n            );\n        }\n    };\n\n    return (\n        <FiveOneGame>\n            <FiveOneSection>\n                <FiveOneHeader>Scoreboard</FiveOneHeader>\n                <FiveOneContainer>\n                    <FiveOneTable stickyHeader>\n                        <TableBody>{renderFiveOneRow(player1)}</TableBody>\n                    </FiveOneTable>\n                </FiveOneContainer>\n            </FiveOneSection>\n            <FiveOneSection>\n                <FiveOneScore>{gameState[player1]['Total']}</FiveOneScore>\n                <div>\n                    <label>{player1}</label>\n                    {renderInput(player1)}\n                </div>\n\n                {/* <PlayerDot></PlayerDot> */}\n            </FiveOneSection>\n            <FiveOneSection>\n                <FiveOneScore>{gameState[player2]['Total']}</FiveOneScore>\n                <label>{player2}</label>\n                {renderInput(player2)}\n            </FiveOneSection>\n            <FiveOneSection>\n                <FiveOneHeader>Scoreboard</FiveOneHeader>\n                <FiveOneContainer>\n                    <FiveOneTable stickyHeader>\n                        <TableBody>{renderFiveOneRow(player2)}</TableBody>\n                    </FiveOneTable>\n                </FiveOneContainer>\n            </FiveOneSection>\n            <WinModal\n                open={winner !== ''}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n            >\n                {body}\n            </WinModal>\n        </FiveOneGame>\n    );\n};\n\nexport default FiveOne;\n","import React from 'react';\nimport { GameTheme } from 'components/Themes';\nimport { useLocation } from 'react-router-dom';\nimport Cricket from 'components/Cricket';\nimport FiveOne from 'components/FiveOne'; // make game render whichever based on mode selected from backend\n\ntype GameProps = {\n    gameID: string;\n    gameType: string;\n    player: string;\n    player1: string;\n    player2: string;\n    connURL: string;\n};\n\nconst Game = () => {\n    const { state } = useLocation<GameProps>();\n    const { gameID, gameType, player, player1, player2, connURL } = state;\n    if (gameType === 'cricket') {\n        return (\n            <GameTheme>\n                <div>\n                    <h2>Cricket</h2>\n                    <h3>Game Code: {gameID}</h3>\n                </div>\n                <div>\n                    <Cricket\n                        gameID={gameID}\n                        connURL={connURL}\n                        player={player}\n                        player1={player1}\n                        player2={player2}\n                    ></Cricket>\n                </div>\n            </GameTheme>\n        );\n    } else if (gameType === 'fiveOhOne') {\n        return (\n            <GameTheme>\n                <div>\n                    <h2>501</h2>\n                    <h3>Game Code: {gameID}</h3>\n                </div>\n                <div>\n                    <FiveOne\n                        gameID={gameID}\n                        connURL={connURL}\n                        player={player}\n                        player1={player1}\n                        player2={player2}\n                    ></FiveOne>\n                </div>\n            </GameTheme>\n        );\n    }\n};\n\nexport default Game;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Landing from './components/Landing';\nimport Create from './components/Create';\nimport Join from './components/Join';\nimport Lobby from './components/Lobby';\nimport Game from './components/Game';\nimport { StylesProvider } from '@material-ui/core/styles';\nimport './App.css';\n\nconst App = () => (\n    <StylesProvider injectFirst>\n        {\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <Switch>\n                    <Route path=\"/\" component={Landing} exact />\n                    <Route path=\"/join\" component={Join} exact />\n                    <Route path=\"/create\" component={Create} exact />\n                    <Route path=\"/lobby\" render={() => <Lobby />} exact />\n                    <Route path=\"/game\" component={Game} exact />\n                </Switch>\n            </BrowserRouter>\n        }\n    </StylesProvider>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/PressStart2P-Regular.5f45b521.ttf\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './fonts/PressStart2P-Regular.ttf';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}